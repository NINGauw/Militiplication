using TMPro;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;

    // public int totalEnemies = 20; // S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n t·ª± ƒë·ªông t·ª´ c√°c Spawner
    public int totalBoss = 1; // Gi·ªØ l·∫°i n·∫øu boss ƒë∆∞·ª£c spawn theo c√°ch kh√°c Spawner th∆∞·ªùng
    private int enemiesRemaining;

    public TextMeshProUGUI enemiesLeftText; // ƒê·∫£m b·∫£o ƒë√£ g√°n t·ª´ Inspector

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            // DontDestroyOnLoad(gameObject); // N·∫øu b·∫°n mu·ªën GameManager t·ªìn t·∫°i qua c√°c scene
        }
        else if (Instance != this)
        {
            Destroy(gameObject); // ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt GameManager instance
            return;
        }
    }

    void Start()
    {
        InitializeLevelEnemyCount();
        UpdateEnemyCountUI();
    }

    void InitializeLevelEnemyCount()
    {
        int calculatedTotalEnemiesFromSpawners = 0;
        EnemySpawner[] spawners = FindObjectsOfType<EnemySpawner>(); // T√¨m t·∫•t c·∫£ EnemySpawner trong scene

        if (spawners.Length == 0)
        {
            Debug.LogWarning("No EnemySpawners found in the scene. Total enemies will rely on manual setup or be 0 (plus bosses).", this);
        }
        else
        {
            foreach (EnemySpawner spawner in spawners)
            {
                if (spawner.enabled) // Ch·ªâ t√≠nh c√°c spawner ƒëang ho·∫°t ƒë·ªông
                {
                    calculatedTotalEnemiesFromSpawners += spawner.GetPlannedEnemyCount();
                }
            }
            Debug.Log($"Calculated total enemies from {spawners.Length} spawners: {calculatedTotalEnemiesFromSpawners}", this);
        }

        // enemiesRemaining gi·ªù s·∫Ω l√† t·ªïng s·ªë qu√°i t·ª´ c√°c spawner c·ªông v·ªõi s·ªë boss (n·∫øu boss kh√¥ng ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi EnemySpawner)
        enemiesRemaining = calculatedTotalEnemiesFromSpawners + totalBoss;
        Debug.Log($"GameManager initialized. Total enemies to defeat (including bosses): {enemiesRemaining}", this);
    }

    public void OnEnemySpawned()
    {
        // H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi EnemySpawner.
        // Hi·ªán t·∫°i, ch√∫ng ta ƒë√£ bi·∫øt t·ªïng s·ªë l∆∞·ª£ng qu√°i t·ª´ ƒë·∫ßu th√¥ng qua InitializeLevelEnemyCount().
        // N√™n h√†m n√†y c√≥ th·ªÉ kh√¥ng c·∫ßn l√†m g√¨ li√™n quan ƒë·∫øn enemiesRemaining.
        // B·∫°n c√≥ th·ªÉ d√πng n√≥ cho m·ª•c ƒë√≠ch kh√°c n·∫øu c·∫ßn, v√≠ d·ª•: theo d√µi s·ªë l∆∞·ª£ng qu√°i ƒëang active.
        // Debug.Log("An enemy has been spawned. GameManager notified.");
    }

    public void OnEnemyDefeated() // ƒê∆∞·ª£c g·ªçi b·ªüi EnemyController khi qu√°i th∆∞·ªùng b·ªã ti√™u di·ªát
    {
        if (enemiesRemaining > 0) // Ch·ªâ tr·ª´ khi c√≤n qu√°i
        {
            enemiesRemaining--;
        }
        else
        {
            Debug.LogWarning("OnEnemyDefeated called, but enemiesRemaining is already 0 or less.", this);
        }
        UpdateEnemyCountUI();
        CheckWinCondition();
    }

    public void OnBossDefeated() // ƒê∆∞·ª£c g·ªçi b·ªüi script c·ªßa Boss khi boss b·ªã ti√™u di·ªát
    {
        if (enemiesRemaining > 0) // Ch·ªâ tr·ª´ khi c√≤n qu√°i (boss c≈©ng l√† m·ªôt ph·∫ßn c·ªßa enemiesRemaining)
        {
            enemiesRemaining--;
        }
        else
        {
             Debug.LogWarning("OnBossDefeated called, but enemiesRemaining is already 0 or less.", this);
        }
        UpdateEnemyCountUI();
        CheckWinCondition();
    }

    private void CheckWinCondition()
    {
        if (enemiesRemaining <= 0)
        {
            Debug.Log("üéâ You Win! All enemies and bosses defeated.", this);

            if (WinUIManager.Instance != null)
            {
                WinUIManager.Instance.TriggerWin();
            }
            else
            {
                Debug.LogWarning("WinUIManager.Instance is null.", this);
            }

            if (CoinManager.Instance != null)
            {
                CoinManager.Instance.AddCoins(5); // S·ªë coin th∆∞·ªüng c√≥ th·ªÉ t√πy ch·ªânh
            }
            else
            {
                Debug.LogWarning("CoinManager.Instance is null.", this);
            }
            
            // (T√πy ch·ªçn) D·ª´ng game ho·∫∑c chuy·ªÉn m√†n, v.v.
            // Time.timeScale = 0f; // V√≠ d·ª•: D·ª´ng game
        }
    }

    private void UpdateEnemyCountUI()
    {
        if (enemiesLeftText != null)
        {
            enemiesLeftText.text = $"Enemies left: {enemiesRemaining}";
        }
        else
        {
            Debug.LogWarning("enemiesLeftText is not assigned in GameManager Inspector.", this);
        }
    }
}